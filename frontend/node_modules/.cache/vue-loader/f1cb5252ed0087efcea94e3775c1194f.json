{"remainingRequest":"D:\\Projects\\Task-Reminder\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Projects\\Task-Reminder\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Projects\\Task-Reminder\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\Task-Reminder\\frontend\\src\\vue-components\\ListTask.vue?vue&type=template&id=3fbe2f2c&","dependencies":[{"path":"D:\\Projects\\Task-Reminder\\frontend\\src\\vue-components\\ListTask.vue","mtime":1585820809025},{"path":"D:\\Projects\\Task-Reminder\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\Task-Reminder\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Projects\\Task-Reminder\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Projects\\Task-Reminder\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"col align-self-center\",\n      attrs: { show: _vm.todos.length > 0 }\n    },\n    [\n      _vm._l(_vm.tasks, function(task) {\n        return _c(\"div\", { staticClass: \"form-row align-items-center\" }, [\n          _c(\"div\", { staticClass: \"col-auto my-1\" }, [\n            _c(\"div\", { staticClass: \"input-group mb-3 todo__row\" }, [\n              _c(\"div\", { staticClass: \"input-group-prepend\" }, [\n                _c(\"span\", { staticClass: \"input-group-text\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: task.iscompleted,\n                        expression: \"task.iscompleted\"\n                      }\n                    ],\n                    attrs: { type: \"checkbox\", title: \"Mark as done?\" },\n                    domProps: {\n                      checked: task.iscompleted,\n                      value: task.iscompleted,\n                      checked: Array.isArray(task.iscompleted)\n                        ? _vm._i(task.iscompleted, task.iscompleted) > -1\n                        : task.iscompleted\n                    },\n                    on: {\n                      change: [\n                        function($event) {\n                          var $$a = task.iscompleted,\n                            $$el = $event.target,\n                            $$c = $$el.checked ? true : false\n                          if (Array.isArray($$a)) {\n                            var $$v = task.iscompleted,\n                              $$i = _vm._i($$a, $$v)\n                            if ($$el.checked) {\n                              $$i < 0 &&\n                                _vm.$set(task, \"iscompleted\", $$a.concat([$$v]))\n                            } else {\n                              $$i > -1 &&\n                                _vm.$set(\n                                  task,\n                                  \"iscompleted\",\n                                  $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                                )\n                            }\n                          } else {\n                            _vm.$set(task, \"iscompleted\", $$c)\n                          }\n                        },\n                        function($event) {\n                          return _vm.updateTask(task)\n                        }\n                      ]\n                    }\n                  })\n                ])\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: task.task,\n                    expression: \"task.task\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                class: task.iscompleted ? \"todo__done\" : \"\",\n                attrs: { type: \"text\" },\n                domProps: { value: task.task },\n                on: {\n                  keypress: function($event) {\n                    task.editing = true\n                  },\n                  keyup: function($event) {\n                    if (\n                      !$event.type.indexOf(\"key\") &&\n                      _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                    ) {\n                      return null\n                    }\n                    return _vm.updateTask(task)\n                  },\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(task, \"task\", $event.target.value)\n                  }\n                }\n              }),\n              _c(\"div\", { staticClass: \"input-group-append\" }, [\n                _c(\"div\", { staticClass: \"input-group-text\" }, [\n                  _c(\n                    \"span\",\n                    {\n                      staticClass: \"input-group-addon addon-left\",\n                      attrs: { title: \"Delete task?\" },\n                      on: {\n                        click: function($event) {\n                          return _vm.deleteTask(task.id)\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n                            X\\n                        \"\n                      )\n                    ]\n                  )\n                ])\n              ])\n            ])\n          ])\n        ])\n      }),\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.tasks.length == 0 && _vm.doneLoading,\n              expression: \"tasks.length==0 && doneLoading\"\n            }\n          ],\n          staticClass: \"alert alert-primary todo__row\"\n        },\n        [_vm._v(\"Add some tasks..\")]\n      )\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}